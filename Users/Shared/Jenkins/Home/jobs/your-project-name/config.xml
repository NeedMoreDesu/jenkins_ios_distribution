<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.3">
      <gitLabConnection></gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>your-project-url</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.5.3">
      <spec></spec>
      <triggerOnPush>true</triggerOnPush>
      <triggerOnMergeRequest>true</triggerOnMergeRequest>
      <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
      <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
      <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
      <triggerOnApprovedMergeRequest>true</triggerOnApprovedMergeRequest>
      <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
      <triggerOnNoteRequest>true</triggerOnNoteRequest>
      <noteRegex>Jenkins please retry a build</noteRegex>
      <ciSkip>true</ciSkip>
      <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
      <setBuildDescription>true</setBuildDescription>
      <branchFilterType>RegexBasedFilter</branchFilterType>
      <includeBranchesSpec></includeBranchesSpec>
      <excludeBranchesSpec></excludeBranchesSpec>
      <targetBranchRegex>*/master</targetBranchRegex>
      <secretToken>{AQAAABAAAAAQK8QFsWVCbEdcu48uLo6PWOc4H0dtIBlmCmsbwxsWoco=}</secretToken>
    </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>set -x

## v should change this ones v

export SLACK_WEBHOOK=https://hooks.slack.com/services/your/own/webhook
export DEVELOPMENT_TEAM=YOUR123TM
export TARGET=YourTargetFromXcode
export BUNDLE_IDENTIFIER=your.bundle.id
export BUILD_DISPLAY_NAME=&quot;YourDisplayName&quot;

export ENABLE_BITCODE=YES

DOMAIN_NAME=&quot;http://localhost:8080&quot;
DOMAIN_NAME_SECURE=&quot;https://localhost:8443&quot;

export CODE_SIGNING_IDENTITY=&quot;iPhone Distribution: your profile here&quot;

## ^ should change this ones ^

## v shouldn&apos;t change this ones v

export PROFILE_NAME=${PROVISIONING_PROFILE}
export XCODE_P_PROFILE=${PROVISIONING_PROFILE}

export BUILD_TYPE=Release
export SPEC=enterprise

export keychain_password=&quot;&quot;
export WORKSPACE=$(pwd)
export TARGET2=${TARGET}

## ^ shouldn&apos;t change this ones ^

rm opts.plist
/usr/libexec/PlistBuddy -c &quot;add :method string ${SPEC}&quot; opts.plist
/usr/libexec/PlistBuddy -c &quot;add :teamID string ${DEVELOPMENT_TEAM}&quot; opts.plist
/usr/libexec/PlistBuddy -c &quot;add :provisioningProfiles:$BUNDLE_IDENTIFIER string $PROFILE_NAME&quot; opts.plist
/usr/libexec/PlistBuddy -c &quot;set :CFBundleShortVersionString $MARKETING_VERSION&quot; $TARGET.plist
/usr/libexec/PlistBuddy -c &quot;set :CFBundleVersion $BUILD_DISPLAY_NAME&quot; $TARGET.plist

rm -rf ${HOME}/Library/Developer/Xcode/DerivedData/

/usr/bin/xcodebuild -version
/usr/bin/agvtool mvers -terse1

/usr/bin/security list-keychains -s ${HOME}/Library/Keychains/login.keychain
/usr/bin/security default-keychain -d user -s ${HOME}/Library/Keychains/login.keychain
/usr/bin/security unlock-keychain -p &quot;${keychain_password}&quot; ${HOME}/Library/Keychains/login.keychain
/usr/bin/security show-keychain-info ${HOME}/Library/Keychains/login.keychain
/usr/bin/security find-identity -p codesigning -v
/usr/bin/xcodebuild -showsdks
/usr/bin/xcodebuild -list
/usr/bin/xcodebuild -target ${TARGET} -configuration ${BUILD_TYPE} clean archive -archivePath ${WORKSPACE}/build/${BUILD_TYPE}-iphoneos/ DEVELOPMENT_TEAM=${DEVELOPMENT_TEAM} PROVISIONING_PROFILE=&quot;${XCODE_P_PROFILE}&quot; -scheme ${TARGET} ENABLE_BITCODE=${ENABLE_BITCODE}
/usr/bin/xcodebuild -exportArchive -archivePath ${WORKSPACE}/build/${BUILD_TYPE}-iphoneos.xcarchive -exportPath ${WORKSPACE}/build/${BUILD_TYPE}-iphoneos -exportOptionsPlist ${WORKSPACE}/opts.plist

mv ${WORKSPACE}/build/${BUILD_TYPE}-iphoneos/$TARGET.ipa ${WORKSPACE}/build/${BUILD_TYPE}-iphoneos/application.ipa
cd ${WORKSPACE}/build/${BUILD_TYPE}-iphoneos/

PLIST_NAME=&quot;app.plist&quot;
INSTALL_PAGE_NAME=&quot;install.html&quot;
FOLDER_NAME_SECURE=&quot;${DOMAIN_NAME_SECURE}/job/${JOB_NAME}/${BUILD_NUMBER}/artifact/build/${BUILD_TYPE}-iphoneos&quot;
FOLDER_NAME=&quot;${DOMAIN_NAME}/job/${JOB_NAME}/${BUILD_NUMBER}/artifact/build/${BUILD_TYPE}-iphoneos&quot;
URL=&quot;${FOLDER_NAME}/application.ipa&quot;
INSTALL_URL=&quot;itms-services://?action=download-manifest&amp;url=${FOLDER_NAME_SECURE}/${PLIST_NAME}&quot;
INSTALL_PAGE_URL=&quot;${FOLDER_NAME}/${INSTALL_PAGE_NAME}&quot;

# Generate Plist
touch ${PLIST_NAME}
echo &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC \&quot;-//Apple//DTD PLIST 1.0//EN\&quot; \&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd\&quot;&gt;
&lt;plist version=\&quot;1.0\&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;items&lt;/key&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;assets&lt;/key&gt;
            &lt;array&gt;
                &lt;dict&gt;
                    &lt;key&gt;kind&lt;/key&gt;
                    &lt;string&gt;software-package&lt;/string&gt;
                    &lt;key&gt;url&lt;/key&gt;
                    &lt;string&gt;${URL}&lt;/string&gt;
                    &lt;/dict&gt;
            &lt;/array&gt;
            &lt;key&gt;metadata&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;bundle-identifier&lt;/key&gt;
                &lt;string&gt;${BUNDLE_IDENTIFIER}&lt;/string&gt;
                &lt;key&gt;bundle-version&lt;/key&gt;
                &lt;string&gt;1.0&lt;/string&gt;
                &lt;key&gt;kind&lt;/key&gt;
                &lt;string&gt;software&lt;/string&gt;
                &lt;key&gt;title&lt;/key&gt;
                &lt;string&gt;${BUILD_DISPLAY_NAME}&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;
&quot; &gt; $PLIST_NAME

CERTIFICATE_URL=&quot;${DOMAIN_NAME}/job/staticItems/lastSuccessfulBuild/artifact/keys.crt&quot;

# Generate install.html page
echo &quot;
&lt;p&gt;&lt;font size=&quot;20&quot;&gt;One-time setup:&lt;/font&gt;&lt;/p&gt;
&lt;a href=\&quot;${CERTIFICATE_URL}\&quot; rel=\&quot;nofollow\&quot; target=\&quot;_blank\&quot;&gt;&lt;p&gt;&lt;font size=\&quot;40\&quot;&gt;Tap, hold, copy &amp; paste into Safari.&lt;/font&gt;&lt;/p&gt;&lt;/a&gt;
&lt;p&gt;&lt;font size=&quot;20&quot;&gt;General -&gt; About -&gt; Certificate Trust Settings&lt;/font&gt;&lt;/p&gt;
&lt;br&gt;
&lt;a href=\&quot;${INSTALL_URL}\&quot;&gt;&lt;p&gt;&lt;font size=\&quot;40\&quot;&gt;Click to install app.&lt;/font&gt;&lt;/p&gt;&lt;/a&gt;
&lt;p&gt;&lt;font size=&quot;20&quot;&gt;General -&gt; Profiles &amp; Device Management&lt;/font&gt;&lt;/p&gt;
&quot; &gt; $INSTALL_PAGE_NAME

# Generating QR code
/usr/local/bin/qrencode --size=20 -o QR.png ${INSTALL_PAGE_URL}

QR_URL=&quot;${FOLDER_NAME}/QR.png&quot;
LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
LAST_COMMIT_HASH=$(git rev-parse HEAD)

# Slack bot webhook
curl -X POST -H &apos;Content-type: application/json&apos; --data &quot;{ \&quot;attachments\&quot;: [ { \&quot;footer\&quot;: \&quot;${LAST_COMMIT_MESSAGE}\&quot;, \&quot;title\&quot;: \&quot;QR code: #${BUILD_NUMBER}@${LAST_COMMIT_HASH}\&quot;, \&quot;pretext\&quot;: \&quot;iOS build\&quot;, \&quot;text\&quot;: \&quot;Install page link: ${INSTALL_PAGE_URL}\&quot;, \&quot;title_link\&quot;: \&quot;${QR_URL}\&quot; } ] }&quot; ${SLACK_WEBHOOK}
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>build/Release-iphoneos/application.ipa,build/Release-iphoneos/app.plist,build/Release-iphoneos/QR.png,build/Release-iphoneos/install.html</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>true</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER}@${GIT_REVISION}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>